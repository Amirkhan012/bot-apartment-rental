from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telegram_db.crud import create_apartment
from telegram.states import Form
from telegram.geocoding import geocode_address


router = Router()


@router.message(StateFilter(Form.address))
async def process_address(message: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏
    –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    """
    address = message.text
    addresses = await geocode_address(address)

    if not addresses:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="addr_retry")
        builder.button(
            text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            callback_data="addr_mod_custom")
        builder.adjust(1)

        await state.update_data(custom_address=address)

        await message.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∏–ª–∏ "
            "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–π –≤–∞–º–∏ –∞–¥—Ä–µ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=builder.as_markup()
        )
        return

    await state.update_data(all_addresses=addresses, current_index=0)
    await show_address_options(message, state)


async def show_address_options(
    message: types.Message,
    state: FSMContext
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ 5 –∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ.
    """
    user_data = await state.get_data()
    addresses = user_data["all_addresses"]
    current_index = user_data["current_index"]

    builder = InlineKeyboardBuilder()
    response_text = "üè† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n\n"

    next_addresses = addresses[current_index:current_index+5]

    for idx, addr in enumerate(next_addresses, start=1+current_index):
        response_text += (
            f"–í–∞—Ä–∏–∞–Ω—Ç {idx}:\n"
            f"üìå –ù–æ–º–µ—Ä –¥–æ–º–∞: {addr['house_number']}\n"
            f"üìç –£–ª–∏—Ü–∞: {addr['road']}\n"
            f"üìç –†–∞–π–æ–Ω: {addr['region']}\n"
            f"üåÜ –ì–æ—Ä–æ–¥: {addr['city']}\n\n"
        )
        builder.button(text=f"–í–∞—Ä–∏–∞–Ω—Ç {idx}", callback_data=f"addr|{idx-1}")

    if len(addresses) > current_index + 5:
        builder.button(text="‚û°Ô∏è –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="addr_more")

    builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="addr_retry")
    builder.button(text="‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É", callback_data="addr_mod")
    builder.adjust(1, repeat=True)

    await message.reply(response_text, reply_markup=builder.as_markup())
    await state.set_state(Form.confirm_address)


@router.callback_query(StateFilter(Form.confirm_address))
async def confirm_address(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    data = callback.data
    current_state = await state.get_state()
    user_data = await state.get_data()

    if data == "addr_retry":
        if current_state not in [
            Form.confirm_address.state,
            Form.address.state
        ]:
            await callback.answer(
                "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                show_alert=True)
            return
        await callback.message.answer("üè† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â—ë —Ä–∞–∑:")
        await state.set_state(Form.address)
        await callback.answer()
        return

    if data in ["addr_mod_custom", "addr_mod"]:
        custom_address = user_data.get("custom_address")
        if current_state != Form.confirm_address.state or not custom_address:
            await callback.answer(
                "‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.",
                show_alert=True)
            return
        await callback.message.answer(
            f"‚úÖ –í–∞—à –∞–¥—Ä–µ—Å:\n\n{custom_address}\n\n"
            "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        await state.clear()
        await callback.answer()
        return

    if data == "addr_more":
        all_addresses = user_data.get("all_addresses")
        current_index = user_data.get("current_index", 0)

        if current_state != Form.confirm_address.state or not all_addresses:
            await callback.answer(
                "‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.",
                show_alert=True)
            return

        if current_index + 5 >= len(all_addresses):
            await callback.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)
            return

        user_data["current_index"] += 5
        await state.update_data(current_index=user_data["current_index"])
        await show_address_options(callback.message, state)
        await callback.answer()
        return

    if "|" in data:
        if current_state != Form.confirm_address.state:
            await callback.answer(
                "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.",
                show_alert=True)
            return

        _, index = data.split("|")
        all_addresses = user_data.get("all_addresses", [])

        try:
            chosen_address = all_addresses[int(index)]
        except (IndexError, ValueError):
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True)
            return

        city = chosen_address["city"]
        street = chosen_address["road"]
        full_address = (
            f"{chosen_address['road']}, {chosen_address['house_number']}, "
            f"{chosen_address['region']}, {city}"
        )

        await state.update_data(address=full_address, city=city, street=street)

        await create_apartment(
                owner_id=user_data["owner_id"],
                city=city,
                street=street,
                address=full_address,
                price=user_data["price"],
                storey=user_data["storey"],
                rooms=user_data["rooms"],
                description=user_data["description"],
                photo_file_ids=user_data["photo_file_ids"]
            )

        await callback.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–¥—Ä–µ—Å:\n\n"
            f"–ì–æ—Ä–æ–¥: {city}\n–ê–¥—Ä–µ—Å: {full_address}"
            "\n\nüéâ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
        )
        await state.clear()
        await callback.answer()
