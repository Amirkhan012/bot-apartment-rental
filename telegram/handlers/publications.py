from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from telegram_db.crud import (
    get_apartments_by_owner, delete_apartment, update_apartment_availability)
from telegram_db.db import AsyncSessionLocal


router = Router()
PAGE_SIZE = 5


@router.message(F.text == "üìÉ –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
async def my_publications(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã ¬´–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏¬ª.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.update_data(current_publications_page=0)
    await show_user_publications(message, state, user_id=message.from_user.id)


async def show_user_publications(
    message: types.Message,
    state: FSMContext,
    user_id: int
) -> None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id, –¥–µ–ª–∏—Ç –∏—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    owner_id = str(user_id)
    apartments = await get_apartments_by_owner(owner_id)

    if not apartments:
        await message.answer("üìÉ –£ –≤–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
        return

    data = await state.get_data()
    current_page = data.get("current_publications_page", 0)
    total_pages = (len(apartments) - 1) // PAGE_SIZE + 1

    start_index = current_page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    pubs_page = apartments[start_index:end_index]

    for apt in pubs_page:
        response = (
            f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ID: {apt.id}\n"
            f"üè† –ì–æ—Ä–æ–¥: {apt.city}\n"
            f"üõèÔ∏è –£–ª–∏—Ü–∞: {apt.street}\n"
            f"üè† –ê–¥—Ä–µ—Å: {apt.address}\n"
            f"üè¢ –≠—Ç–∞–∂: {apt.storey}\n"
            f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç: {apt.rooms}\n"
            f"üí∞ –¶–µ–Ω–∞: {apt.price} —Ä—É–±.\n"
            f"üìÖ –°—Ç–∞—Ç—É—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' if apt.is_available else '‚ùå –ó–∞–Ω—è—Ç–æ'}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {apt.description}\n"
        )

        if apt.photos:
            photo_ids = [photo.file_id for photo in apt.photos]
            chunks = [photo_ids[i:i + 5] for i in range(0, len(photo_ids), 5)]
            for chunk in chunks:
                media = [
                    types.InputMediaPhoto(media=file_id) for file_id in chunk]
                await message.bot.send_media_group(
                    chat_id=message.chat.id, media=media)

        action_kb = InlineKeyboardBuilder()
        action_kb.button(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete|{apt.id}")
        action_kb.button(
            text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"toggle|{apt.id}")
        action_kb.adjust(2)
        await message.answer(response, reply_markup=action_kb.as_markup())

    nav_kb = InlineKeyboardBuilder()
    if current_page > 0:
        nav_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pubs_prev")
    if current_page < total_pages - 1:
        nav_kb.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="pubs_next")
    nav_kb.adjust(1)
    if nav_kb.buttons:
        await message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}",
                             reply_markup=nav_kb.as_markup())

    await state.update_data(current_publications_page=current_page)


@router.callback_query(F.data.in_(["pubs_next", "pubs_prev"]))
async def publications_pagination(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏
    –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π.
    """
    data = await state.get_data()
    current_page = data.get("current_publications_page", 0)
    user_id = callback.from_user.id

    apartments = await get_apartments_by_owner(str(user_id))
    total_pages = (len(apartments) - 1) // PAGE_SIZE + 1

    if callback.data == "pubs_next" and current_page < total_pages - 1:
        current_page += 1
    elif callback.data == "pubs_prev" and current_page > 0:
        current_page -= 1

    await state.update_data(current_publications_page=current_page)
    await show_user_publications(callback.message, state, user_id=user_id)
    await callback.answer()


@router.callback_query(F.data.startswith("delete|"))
async def delete_publication(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç id –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ callback_data –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã,
    –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    _, apt_id_str = callback.data.split("|")
    apt_id = int(apt_id_str)
    owner_id = str(callback.from_user.id)

    async with AsyncSessionLocal() as session:
        try:
            await delete_apartment(session, apt_id, owner_id)
        except ValueError as e:
            await callback.answer(str(e), show_alert=True)
            return
    await callback.message.answer(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {apt_id} —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()

    await my_publications(callback.message, state)


@router.callback_query(F.data.startswith("toggle|"))
async def toggle_availability(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç id –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.
    """
    _, apt_id_str = callback.data.split("|")
    apt_id = int(apt_id_str)
    owner_id = str(callback.from_user.id)

    async with AsyncSessionLocal() as session:
        try:
            apt = await update_apartment_availability(
                session, apt_id, owner_id)
        except ValueError as e:
            await callback.answer(str(e), show_alert=True)
            return
    new_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if apt.is_available else "‚ùå –ó–∞–Ω—è—Ç–æ"
    await callback.message.answer(
        f"–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è {apt_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}.")
    await callback.answer()
